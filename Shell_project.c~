/**
UNIX Shell Project

Sistemas Operativos
Grados I. Informatica, Computadores & Software
Dept. Arquitectura de Computadores - UMA

Some code adapted from "Fundamentos de Sistemas Operativos", Silberschatz et al.

To compile and run the program:
   $ gcc Shell_project.c job_control.c -o Shell
   $ ./Shell          
	(then type ^D to exit program)

**/

#include "job_control.h"   // remember to compile with module job_control.c 

#define MAX_LINE 256 /* 256 chars per line, per command, should be enough. */

// -----------------------------------------------------------------------
//                            MAIN          
// -----------------------------------------------------------------------

int main(void)
{
	char inputBuffer[MAX_LINE]; /* buffer to hold the command entered */
	int background;             /* equals 1 if a command is followed by '&' */
	char *args[MAX_LINE/2];     /* command line (of 256) has max of 128 arguments */
	// probably useful variables:
	int pid_fork, pid_wait; /* pid for created and waited process */
	int status;             /* status returned by wait */
	enum status status_res; /* status processed by analyze_status() */
	int info;				/* info processed by analyze_status() */

	while (1)   /* Program terminates normally inside get_command() after ^D is typed*/
	{   		
		printf("COMMAND->");
		fflush(stdout);
		get_command(inputBuffer, MAX_LINE, args, &background);  /* get next command */
		terminal_signals(SIG_IGN); 	/* ignore terminal signals */
		
		if(args[0]==NULL) continue;   // if empty command

		if(strcmp(*args, "cd") == 0){ /* if the command is "cd" then */
			if(chdir(args[1]) < 0){ 	/* execute it as an internal one */
				perror(args[1]);
			}
		} else {  	/* else the command is an external one */
			pid_fork = fork();
			if(pid_fork){ 		/* branch for a parent process */
				if(!background){  	 /* if a process runs in foreground */
						int gid_state = setpgid(pid_fork, pid_fork); 	/* assign different from the parent PGID to the child */
						int pgrp_terminal = tcgetpgrp(STDIN_FILENO); 	/* get terminal's PGID */
						int pgrp_status = tcsetpgrp(STDIN_FILENO, pid_fork);  /* assign the terminal to the child's PGID */

						pid_wait = waitpid(pid_fork, &status, WUNTRACED);   /* wait for the created child process */
						status_res = analyze_status(status, &info);		/* obtain status report */
						tcsetpgrp(STDIN_FILENO, pgrp_terminal);  /* give back the terminal to the Shell */
						if(info != EXIT_FAILURE) 	/* inform about terminated job */
							printf("Foreground pid : %d, command: %s, %s, info: %d.\n", pid_wait, *args, status_strings[status_res], info);
				} else { 	/* otherwise */
					printf("Background job is running... pid : %d, command: %s.\n", pid_fork, *args);
				}
			} else if (!pid_fork){ 	/* branch for a child process */
				terminal_signals(SIG_DFL);	/* restore terminal signals */
				if(execvp(*args, args) < 0){	/* execute child process with a different content */
					printf("Command %s is not found.\n", *args);
					exit(EXIT_FAILURE);
				} else {
					exit(EXIT_SUCCESS);
				}
			}
		}
		/* the steps are:
			 (1) fork a child process using fork()
			 (2) the child process will invoke execvp()
			 (3) if background == 0, the parent will wait, otherwise continue 
			 (4) Shell shows a status message for processed command 
			 (5) loop returns to get_commnad() function
		*/

	} // end while
}
